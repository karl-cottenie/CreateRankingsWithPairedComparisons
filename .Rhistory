mutate(extra = 1) %>%
bind_rows(switch1) %>%
dplyr::select(winner, loser, extra) %>%
#codes_to_counts(c(1,0)) %>%
btdata(.) %>%
btfit(1.1) %>%
coef() %>% dim()
dfJudging %>% slice(-1) %>%
mutate(extra = 1) %>%
bind_rows(switch1) %>%
dplyr::select(winner, loser, extra) %>%
#codes_to_counts(c(1,0)) %>%
btdata(.) %>%
btfit(1.1) %>%
coef() %>% length()
dfJudging %>%
mutate(item1wins = 1, item2wins =0) %>%
dplyr::select(winner, loser, item1wins, item2wins) %>%
btdata(.) %>%
btfit(1.1) %>%
coef()
dfJudging %>%
mutate(item1wins = 1, item2wins = 0)
dfJudging %>%
mutate(item1wins = 1, item2wins = 0) %>%
dplyr::select(winner, loser, item1wins, item2wins)
dfJudging %>%
mutate(item1wins = 1, item2wins = 0) %>%
dplyr::select(winner, loser, item1wins, item2wins) %>%
btdata(.)
summary(Comparisons_fit, SE = T) %>% .$item_summary %>%
ggplot(aes(x = item, y = estimate)) + geom_point()
summary(Comparisons_fit, SE = T) %>% .$item_summary
summary(Comparisons_fit, SE = T) %>% .$item_summary %>%
ggplot(aes(x = 1:nrow(.), y = estimate)) + geom_point()
summary(Comparisons_fit, SE = T) %>% .$item_summary %>%
ggplot(aes( y = estimate)) +
geom_point() +
summary(Comparisons_fit, SE = T) %>% .$item_summary %>%
ggplot(aes( y = estimate)) +
geom_point() + geom_abline()
summary(Comparisons_fit, SE = T) %>% .$item_summary %>%
ggplot(aes( y = estimate)) +
geom_point()
summary(Comparisons_fit, SE = T) %>% .$item_summary %>%
ggplot(aes(x = as.character(1:nrow(.)), y = estimate)) +
geom_point()
summary(Comparisons_fit, SE = T) %>% .$item_summary %>%
ggplot(aes(x = 1:nrow(.), y = estimate)) +
geom_point()
summary(Comparisons_fit, SE = T) %>% .$item_summary %>%
ggplot(aes(x = 1:nrow(.), y = estimate)) +
geom_point() + scale_x_discrete(breaks = 1:nrow(.),
labels = item)
dfComparison_btdata
summary(Comparisons_fit, SE = T) %>% .$item_summary %>%
ggplot(aes(x = 1:nrow(.), y = estimate)) +
geom_point() + scale_x_discrete(breaks = 1:37,
labels = item)
summary(Comparisons_fit, SE = T) %>% .$item_summary %>%
ggplot(aes(x = 1:nrow(.), y = estimate)) +
geom_point() + scale_x_discrete(breaks = 1:37,
labels = Comparisons_fit$item_summary$item)
summary(Comparisons_fit, SE = T) %>% .$item_summary %>%
ggplot(aes(x = 1:nrow(.), y = estimate)) +
geom_point() + scale_x_discrete(breaks = 1:37,
labels = Comparisons_fit$item_summary$item)
summary(Comparisons_fit, SE = T) %>% .$item_summary
summary(Comparisons_fit, SE = T) %>% .$item_summary %>%
mutate(rank = 1:nrow(.)) %>%
ggplot(aes(x = rank, y = estimate)) +
geom_point() + scale_x_discrete(breaks = rank,
labels = Comparisons_fit$item_summary$item)
summary(Comparisons_fit, SE = T) %>% .$item_summary %>%
mutate(rank = 1:nrow(.)) %>%
ggplot(aes(x = rank, y = estimate)) +
geom_point() +
summary(Comparisons_fit, SE = T) %>% .$item_summary %>%
mutate(rank = 1:nrow(.)) %>%
ggplot(aes(x = rank, y = estimate)) +
geom_point()
summary(Comparisons_fit, SE = T) %>% .$item_summary %>%
mutate(rank = 1:nrow(.)) %>%
ggplot(aes(x = rank, y = estimate)) +
geom_point()
summary(Comparisons_fit, SE = T) %>% .$item_summary %>%
mutate(rank = 1:nrow(.)) %>%
ggplot(aes( y = estimate)) +
geom_bar()
summary(Comparisons_fit, SE = T) %>% .$item_summary %>%
mutate(rank = 1:nrow(.)) %>%
ggplot(aes( estimate)) +
geom_bar()
summary(Comparisons_fit, SE = T) %>% .$item_summary %>%
mutate(rank = 1:nrow(.)) %>%
ggplot(aes(x = rank, y = estimate)) +
geom_col() + scale_x_discrete(breaks = rank,
labels = Comparisons_fit$item_summary$item)
summary(Comparisons_fit, SE = T) %>% .$item_summary %>%
mutate(rank = 1:nrow(.)) %>%
ggplot(aes(x = rank, y = estimate)) +
geom_col() #+ scale_x_discrete(breaks = rank,
summary(Comparisons_fit, SE = T) %>% .$item_summary %>%
mutate(rank = 1:nrow(.))
summary(Comparisons_fit, SE = T) %>% .$item_summary %>%
mutate(rank = 1:nrow(.)) %>%
ggplot(aes(x = rank, y = estimate, ymin = estimate-SE, ymax = estimate + SE)) +
geom_pointrange() #+ scale_x_discrete(breaks = rank,
summary(Comparisons_fit, SE = T) %>% .$item_summary %>%
mutate(rank = 1:nrow(.)) %>%
ggplot(aes(x = rank, y = estimate, ymin = estimate-SE, ymax = estimate + SE)) +
geom_pointrange() + scale_x_discrete(breaks = rank,
labels = Comparisons_fit$item_summary$item)
summary(Comparisons_fit, SE = T) %>% .$item_summary %>%
mutate(rank = 1:nrow(.)) %>%
ggplot(aes(x = rank, y = estimate, ymin = estimate-SE, ymax = estimate + SE)) +
geom_pointrange() + theme(axis.text.x = item)
summary(Comparisons_fit, SE = T) %>% .$item_summary %>%
mutate(rank = 1:nrow(.)) %>%
ggplot(aes(x = rank, y = estimate, ymin = estimate-SE, ymax = estimate + SE)) +
geom_pointrange() + theme(axis.text.x = Comparisons_fit$item_summary$item)
summary(Comparisons_fit, SE = T) %>% .$item_summary %>%
mutate(rank = 1:nrow(.)) %>%
ggplot(aes(x = rank, y = estimate, ymin = estimate-SE, ymax = estimate + SE)) +
geom_pointrange()
summary(Comparisons_fit, SE = T) %>% .$item_summary %>%
mutate(rank = 1:nrow(.)) %>%
ggplot(aes(x = item, y = estimate, ymin = estimate-SE, ymax = estimate + SE)) +
geom_pointrange()
summary(Comparisons_fit, SE = T) %>% .$item_summary %>%
mutate(rank = 1:nrow(.)) %>%
ggplot(aes(x = fct_reorder(item, estimate), y = estimate,
ymin = estimate-SE, ymax = estimate + SE)) +
geom_pointrange()
summary(Comparisons_fit, SE = T) %>% .$item_summary %>%
mutate(rank = 1:nrow(.)) %>%
ggplot(aes(x = fct_reorder(item, desc(estimate)), y = estimate,
ymin = estimate-SE, ymax = estimate + SE)) +
geom_pointrange()
summary(Comparisons_fit, SE = T) %>% .$item_summary %>%
mutate(rank = 1:nrow(.)) %>%
ggplot(aes(x = fct_reorder(item, desc(estimate)), y = estimate,
ymin = estimate-SE, ymax = estimate + SE)) +
geom_pointrange() + xlab("Item") + ylab("Rank")
summary(Comparisons_fit, SE = T) %>% .$item_summary %>%
#mutate(rank = 1:nrow(.)) %>%
ggplot(aes(x = fct_reorder(item, desc(estimate)), y = estimate,
ymin = estimate-SE, ymax = estimate + SE)) +
geom_pointrange() + xlab("Item") + ylab("Rank")
summary(Comparisons_fit, SE = T) %>% .$item_summary %>%
ggplot(aes(x = fct_reorder(item, desc(estimate)), y = estimate,
ymin = estimate-SE, ymax = estimate + SE)) +
geom_pointrange() + xlab("Item") + ylab("Rank")
coef(Comparisons_fit)
View(dfS)
colSums(dfS)
(full_join(dfComparison %>% dplyr::filter(Team2Better == TRUE) %>%
group_by(Team1) %>%
summarise(n1 = n()),
dfComparison %>% dplyr::filter(Team2Better == FALSE) %>%
group_by(Team2) %>%
summarise(n2 = n()) %>%
dplyr::rename(Team1 = Team2)) %>%
# necessary for the full_join
replace(is.na(.), 0) %>%
# necessary for computing the total sum
mutate(n = n1 + n2) %>%
# necessary to get the same order as the dfS
arrange(Team1) %>%
pull(n))
rowSums(dfS)
vcNodes
summary(Comparisons_fit, SE = T) %>% .$item_summary
vcNodes
tibble(item = vcNodes$vcNodes,
TotalWins = colSums(dfS),
TotalLosses = rowSums(dfS))
summary(Comparisons_fit, SE = T) %>% .$item_summary %>%
left_join(tibble(item = vcNodes$vcNodes,
TotalWins = colSums(dfS),
TotalLosses = rowSums(dfS)))
summary(Comparisons_fit, SE = T) %>% .$item_summary %>%
left_join(tibble(item = vcNodes$vcNodes,
TotalWins = colSums(dfS),
TotalLosses = rowSums(dfS))) %>% View()
summary(Comparisons_fit, SE = T) %>% .$item_summary %>%
left_join(tibble(item = vcNodes$vcNodes,
TotalWins = rowSums(dfS),
TotalLosses = colSums(dfS))) %>%
ggplot(aes(x = fct_reorder(item, desc(estimate)), y = estimate,
ymin = estimate-SE, ymax = estimate + SE)) +
geom_pointrange() + xlab("Item") + ylab("Rank")
summary(Comparisons_fit, SE = T) %>% .$item_summary %>%
left_join(tibble(item = vcNodes$vcNodes,
TotalWins = rowSums(dfS),
TotalLosses = colSums(dfS))) %>%
ggplot(aes(x = fct_reorder(item, desc(estimate)), y = estimate,
ymin = estimate-SE, ymax = estimate + SE)) +
geom_pointrange() + xlab("Item") + ylab("Rank") +
geom_text(aes(x = fct_reorder(item, desc(estimate)), y = 4, label = TotalWins))
summary(Comparisons_fit, SE = T) %>% .$item_summary %>%
left_join(tibble(item = vcNodes$vcNodes,
TotalWins = rowSums(dfS),
TotalLosses = colSums(dfS))) %>%
ggplot(aes(x = fct_reorder(item, desc(estimate)), y = estimate,
ymin = estimate-SE, ymax = estimate + SE)) +
geom_pointrange() + xlab("Item") + ylab("Rank") +
geom_text(aes(x = fct_reorder(item, desc(estimate)), y = 4, label = TotalWins)) +
geom_text(aes(x = fct_reorder(item, desc(estimate)), y = -10, label = TotalLosses))
summary(Comparisons_fit, SE = T) %>% .$item_summary %>%
# add the total wins and losses bc more intuitive
left_join(tibble(item = vcNodes$vcNodes,
TotalWins = rowSums(dfS),
TotalLosses = colSums(dfS))) %>%
ggplot(aes(x = fct_reorder(item, desc(estimate)), y = estimate,
ymin = estimate-SE, ymax = estimate + SE)) +
geom_pointrange() + xlab("Item") + ylab("Rank") +
# TotalWins at the top of the figure
geom_text(aes(x = fct_reorder(item, desc(estimate)), y = +Inf, label = TotalWins)) +
# TotalLosses at the bottom of the figure
geom_text(aes(x = fct_reorder(item, desc(estimate)), y = -10, label = TotalLosses))
summary(Comparisons_fit, SE = T) %>% .$item_summary %>%
# add the total wins and losses bc more intuitive
left_join(tibble(item = vcNodes$vcNodes,
TotalWins = rowSums(dfS),
TotalLosses = colSums(dfS))) %>%
ggplot(aes(x = fct_reorder(item, desc(estimate)), y = estimate,
ymin = estimate-SE, ymax = estimate + SE)) +
geom_pointrange() + xlab("Item") + ylab("Rank") +
# TotalWins at the top of the figure
geom_text(aes(x = fct_reorder(item, desc(estimate)), y = +Inf - 0.3, label = TotalWins)) +
# TotalLosses at the bottom of the figure
geom_text(aes(x = fct_reorder(item, desc(estimate)), y = -10, label = TotalLosses))
summary(Comparisons_fit, SE = T) %>% .$item_summary %>%
# add the total wins and losses bc more intuitive
left_join(tibble(item = vcNodes$vcNodes,
TotalWins = rowSums(dfS),
TotalLosses = colSums(dfS))) %>%
ggplot(aes(x = fct_reorder(item, desc(estimate)), y = estimate,
ymin = estimate-SE, ymax = estimate + SE)) +
geom_pointrange() + xlab("Item") + ylab("Rank") +
# TotalWins at the top of the figure
geom_text(aes(x = fct_reorder(item, desc(estimate)), y = 4, label = TotalWins)) +
# TotalLosses at the bottom of the figure
geom_text(aes(x = fct_reorder(item, desc(estimate)), y = -10, label = TotalLosses))
## _Input example from the website -----
dfComparison = read_table("https://www.anishathalye.com/media/2015/03/07/blueprint-rookie-data.txt", comment = "#", col_names = c("Team1", "Team2", "Team2Better"))
## Step 1: create unique team names
vcNodes = dfComparison %>% select(Team1, Team2) %>%
unlist() %>%
unique()
## __preparing the data from the raw counts ------
dfComparison_4col = codes_to_counts(dfComparison, c("FALSE","TRUE"))
dfComparison_btdata = btdata(dfComparison_4col, return_graph = T)
par(mar = c(0, 0, 0, 0) + 0.1)
plot.igraph(dfComparison_btdata$graph, edge.arrow.size = 0.5)
## __Fitting the model -------
Comparisons_fit = btfit(dfComparison_btdata, 1.1)
summary(Comparisons_fit, SE = T) %>% .$item_summary %>%
# add the total wins and losses bc more intuitive
left_join(tibble(item = vcNodes$vcNodes,
TotalWins = rowSums(dfS),
TotalLosses = colSums(dfS))) %>%
ggplot(aes(x = fct_reorder(item, desc(estimate)), y = estimate,
ymin = estimate-SE, ymax = estimate + SE)) +
geom_pointrange() + xlab("Item") + ylab("Rank") +
# TotalWins at the top of the figure
geom_text(aes(x = fct_reorder(item, desc(estimate)), y = 4, label = TotalWins)) +
# TotalLosses at the bottom of the figure
geom_text(aes(x = fct_reorder(item, desc(estimate)), y = -10, label = TotalLosses))
summary(Comparisons_fit, SE = T) %>% .$item_summary %>%
# add the total wins and losses bc more intuitive
left_join(tibble(item = vcNodes$vcNodes,
TotalWins = rowSums(dfS),
TotalLosses = colSums(dfS))) %>%
ggplot(aes(x = fct_reorder(item, desc(estimate)), y = estimate,
ymin = estimate-SE, ymax = estimate + SE)) +
geom_pointrange() + xlab("Item") + ylab("Rank")
summary(Comparisons_fit, SE = T) %>% .$item_summary
## Step 1: create unique team names
vcNodes = dfComparison %>% select(Team1, Team2) %>%
unlist() %>%
unique()
vcNodes = vcNodes[order(vcNodes)]
vcNodes = data_frame(vcNodes, number = 1:length(vcNodes))
## Step 2: replace team names w/ numbers
dfComparisonNumber =  bind_cols(dfComparison,
(dfComparison %>% select(Team1) %>%
left_join(vcNodes, by = c("Team1" = "vcNodes"))),
(dfComparison %>% select(Team2) %>%
left_join(vcNodes, by = c("Team2" = "vcNodes")))) %>%
select(number, number1, Team2Better) %>%
rename(Team1Number = number,
Team2Number = number1) %>%
mutate(row = 1:nrow(dfComparison)) %>%
as.data.frame()
## Step 3: create empty matrix
dfS = array(0, dim = c(nrow(vcNodes), nrow(vcNodes), nrow(dfComparison)))
summary(Comparisons_fit, SE = T) %>% .$item_summary %>%
# add the total wins and losses bc more intuitive
left_join(tibble(item = vcNodes$vcNodes,
TotalWins = rowSums(dfS),
TotalLosses = colSums(dfS))) %>%
ggplot(aes(x = fct_reorder(item, desc(estimate)), y = estimate,
ymin = estimate-SE, ymax = estimate + SE)) +
geom_pointrange() + xlab("Item") + ylab("Rank") +
# TotalWins at the top of the figure
geom_text(aes(x = fct_reorder(item, desc(estimate)), y = 4, label = TotalWins)) +
# TotalLosses at the bottom of the figure
geom_text(aes(x = fct_reorder(item, desc(estimate)), y = -10, label = TotalLosses))
tibble(item = vcNodes$vcNodes,
TotalWins = rowSums(dfS),
TotalLosses = colSums(dfS))
rowSums(dfS)
## Step 1: create unique team names
vcNodes = dfComparison %>% select(Team1, Team2) %>%
unlist() %>%
unique()
vcNodes = vcNodes[order(vcNodes)]
vcNodes = data_frame(vcNodes, number = 1:length(vcNodes))
## Step 2: replace team names w/ numbers
dfComparisonNumber =  bind_cols(dfComparison,
(dfComparison %>% select(Team1) %>%
left_join(vcNodes, by = c("Team1" = "vcNodes"))),
(dfComparison %>% select(Team2) %>%
left_join(vcNodes, by = c("Team2" = "vcNodes")))) %>%
select(number, number1, Team2Better) %>%
rename(Team1Number = number,
Team2Number = number1) %>%
mutate(row = 1:nrow(dfComparison)) %>%
as.data.frame()
## Step 3: create empty matrix
dfS = array(0, dim = c(nrow(vcNodes), nrow(vcNodes), nrow(dfComparison)))
dfS
dfComparison
dfComparison %>% select(Team1, Team2)
## Step 1: create unique team names
vcNodes = dfComparison %>% select(Team1, Team2) %>%
unlist() %>%
unique()
vcNodes
vcNodes = vcNodes[order(vcNodes)]
vcNodes
vcNodes = data_frame(vcNodes, number = 1:length(vcNodes))
## Step 2: replace team names w/ numbers
dfComparisonNumber =  bind_cols(dfComparison,
(dfComparison %>% select(Team1) %>%
left_join(vcNodes, by = c("Team1" = "vcNodes"))),
(dfComparison %>% select(Team2) %>%
left_join(vcNodes, by = c("Team2" = "vcNodes")))) %>%
select(number, number1, Team2Better) %>%
rename(Team1Number = number,
Team2Number = number1) %>%
mutate(row = 1:nrow(dfComparison)) %>%
as.data.frame()
dfComparisonNumber
## Step 3: create empty matrix
dfS = array(0, dim = c(nrow(vcNodes), nrow(vcNodes), nrow(dfComparison)))
dfS
## Step 4: fill empty array the smart way
for (i in 1:nrow(dfComparisonNumber)) {
if (dfComparisonNumber[i,3] == FALSE){
dfS[dfComparisonNumber[i,1], dfComparisonNumber[i,2], dfComparisonNumber[i,4]] = 1
} else {
dfS[dfComparisonNumber[i,2], dfComparisonNumber[i,1], dfComparisonNumber[i,4]] = 1
}
}
dfS
## Step 3: create empty matrix
dfS = array(0, dim = c(nrow(vcNodes), nrow(vcNodes), nrow(dfComparison)))
## Step 4: fill empty array the smart way
for (i in 1:nrow(dfComparisonNumber)) {
if (dfComparisonNumber[i,3] == TRUE){
dfS[dfComparisonNumber[i,1], dfComparisonNumber[i,2], dfComparisonNumber[i,4]] = 1
} else {
dfS[dfComparisonNumber[i,2], dfComparisonNumber[i,1], dfComparisonNumber[i,4]] = 1
}
}
## Step 5: compute the sum of all the comparisons per team
dfS = apply(dfS, c(1,2), sum)
rowSums(dfS)
colSums(dfS)
summary(Comparisons_fit, SE = T) %>% .$item_summary %>%
# add the total wins and losses bc more intuitive
left_join(tibble(item = vcNodes$vcNodes,
TotalWins = rowSums(dfS),
TotalLosses = colSums(dfS))) %>%
ggplot(aes(x = fct_reorder(item, desc(estimate)), y = estimate,
ymin = estimate-SE, ymax = estimate + SE)) +
geom_pointrange() + xlab("Item") + ylab("Rank") +
# TotalWins at the top of the figure
geom_text(aes(x = fct_reorder(item, desc(estimate)), y = 4, label = TotalWins)) +
# TotalLosses at the bottom of the figure
geom_text(aes(x = fct_reorder(item, desc(estimate)), y = -10, label = TotalLosses))
library(BradleyTerryScalable)
install.packages(c("statnet", "BradleyTerryScalable", "igraph"))
library(BradleyTerryScalable)
library(igraph)
library(statnet)
## _Input example from the website -----
dfComparison = read_table("https://www.anishathalye.com/media/2015/03/07/blueprint-rookie-data.txt", comment = "#", col_names = c("Team1", "Team2", "Team2Better"))
## Step 1: create unique team names
vcNodes = dfComparison %>% select(Team1, Team2) %>%
unlist() %>%
unique()
vcNodes = vcNodes[order(vcNodes)]
vcNodes = data_frame(vcNodes, number = 1:length(vcNodes))
## Step 2: replace team names w/ numbers
dfComparisonNumber =  bind_cols(dfComparison,
(dfComparison %>% select(Team1) %>%
left_join(vcNodes, by = c("Team1" = "vcNodes"))),
(dfComparison %>% select(Team2) %>%
left_join(vcNodes, by = c("Team2" = "vcNodes")))) %>%
select(number, number1, Team2Better) %>%
rename(Team1Number = number,
Team2Number = number1) %>%
mutate(row = 1:nrow(dfComparison)) %>%
as.data.frame()
## Step 3: create empty matrix
dfS = array(0, dim = c(nrow(vcNodes), nrow(vcNodes), nrow(dfComparison)))
## Step 4: fill empty array the smart way
for (i in 1:nrow(dfComparisonNumber)) {
if (dfComparisonNumber[i,3] == TRUE){
dfS[dfComparisonNumber[i,1], dfComparisonNumber[i,2], dfComparisonNumber[i,4]] = 1
} else {
dfS[dfComparisonNumber[i,2], dfComparisonNumber[i,1], dfComparisonNumber[i,4]] = 1
}
}
## Step 5: compute the sum of all the comparisons per team
dfS = apply(dfS, c(1,2), sum)
rowSums(dfS)
colSums(dfS)
judging = as.network(x = dfS,
directed = TRUE,
loops = FALSE,
matrix.type = "adjacency")
plot.network(judging)
## __preparing the data from the raw counts ------
dfComparison_4col = codes_to_counts(dfComparison, c("FALSE","TRUE"))
library(tidyverse)
library(viridis)
# + scale_color/fill_viridis(discrete = T/F)
theme_set(theme_light())
library(statnet)
library(BradleyTerryScalable)
library(igraph)
dfComparison
## Step 1: create unique team names
vcNodes = dfComparison %>% select(Team1, Team2) %>%
unlist() %>%
unique()
vcNodes
vcNodes = vcNodes[order(vcNodes)]
vcNodes = data_frame(vcNodes, number = 1:length(vcNodes))
vcNodes
## Step 2: replace team names w/ numbers
dfComparisonNumber =  bind_cols(dfComparison,
(dfComparison %>% select(Team1) %>%
left_join(vcNodes, by = c("Team1" = "vcNodes"))),
(dfComparison %>% select(Team2) %>%
left_join(vcNodes, by = c("Team2" = "vcNodes")))) %>%
select(number, number1, Team2Better) %>%
rename(Team1Number = number,
Team2Number = number1) %>%
mutate(row = 1:nrow(dfComparison)) %>%
as.data.frame()
dfComparisonNumber
## Step 3: create empty matrix
dfS = array(0, dim = c(nrow(vcNodes), nrow(vcNodes), nrow(dfComparison)))
## Step 4: fill empty array the smart way
for (i in 1:nrow(dfComparisonNumber)) {
if (dfComparisonNumber[i,3] == TRUE){
dfS[dfComparisonNumber[i,1], dfComparisonNumber[i,2], dfComparisonNumber[i,4]] = 1
} else {
dfS[dfComparisonNumber[i,2], dfComparisonNumber[i,1], dfComparisonNumber[i,4]] = 1
}
}
## Step 5: compute the sum of all the comparisons per team
dfS = apply(dfS, c(1,2), sum)
dfS
full_join(dfComparison %>% dplyr::filter(Team2Better == FALSE) %>%
group_by(Team1) %>%
summarise(n1 = n()),
dfComparison %>% dplyr::filter(Team2Better == TRUE) %>%
group_by(Team2) %>%
summarise(n2 = n()) %>%
dplyr::rename(Team1 = Team2)) %>%
# necessary for the full_join
replace(is.na(.), 0) %>%
# necessary for computing the total sum
mutate(n = n1 + n2) %>%
# necessary to get the same order as the dfS
arrange(Team1) %>%
pull(n)
full_join(dfComparison %>% dplyr::filter(Team2Better == FALSE) %>%
group_by(Team1) %>%
summarise(n1 = n()),
dfComparison %>% dplyr::filter(Team2Better == TRUE) %>%
group_by(Team2) %>%
summarise(n2 = n()) %>%
dplyr::rename(Team1 = Team2))
dfComparison %>% dplyr::filter(Team2Better == FALSE) %>%
group_by(Team1)
dfComparison %>% dplyr::filter(Team2Better == FALSE) %>%
group_by(Team1) %>%
summarise(n1 = n())
dfComparison
dfComparisonNumber
dfComparison
dfComparison
dfS
version
